#!/usr/bin/python3.4
#Receiver Program
#Authors: Ryan Baker, Zane Zakraisek
import sys
import math
import numpy

data_file = './data.dat'

class Sat_trans:
  def __init__(self, num):
    self.num = num

##########Helper Functions##########
#Converts geo coordinates to cartesian at time tv
def geo_to_cart(tv, lat_d, lat_m, lat_s, NS, lon_d, lon_m, lon_s, EW, h):
  psi = NS*deg_to_rad(lat_d, lat_m, lat_s)
  lam = EW*deg_to_rad(lon_d, lon_m, lon_s) + 2*pi*tv/s
  r   = R+h

  x = r * math.cos(psi) * math.cos(lam)
  y = r * math.cos(psi) * math.sin(lam)
  z = r * math.sin(psi)

  return [x,y,z]

#Converts cartesian coordinates to geo at time tv
def cart_to_geo(tv, xv):
  x = xv[0]
  y = xv[1]
  z = xv[2]
  
  h = numpy.linalg.norm(xv) - R 

  if (x**2 + y**2) is not 0:
    psi = math.atan( z/((x**2 + y**2)**(.5)) )
  elif z > 0:
    psi = pi/2
  else:
    psi = -pi/2

  if x == 0:
    if y > 0:
      lam = pi/2
    else:
      lam = -pi/2
  elif x > 0 and y > 0:
    lam = math.atan(y/x)
  elif x < 0:
    lam = pi + math.atan(y/x)
  else:
    lam = 2*pi + math.atan(y/x)
  lam = lam - 2*pi*tv/s
  while lam < -1*pi:
    lam = lam + 2*pi
  while lam > pi:
    lam = lam - 2*pi

  EW = 1
  if lam < 0: 
    EW = -1

  NS = 1
  if psi < 0:
    NS = -1

  (lat_d, lat_m, lat_s) = rad_to_deg(math.fabs(psi))
  (lon_d, lon_m, lon_s) = rad_to_deg(math.fabs(lam))
  
  return (lat_d, lat_m, lat_s, NS, lon_d, lon_m, lon_s, EW, h)

#Converts degrees to radians
def deg_to_rad(d, m, s):
  tmp = d + m/60 + s/3600
  return tmp*math.pi/180

#Converts radians to degrees
def rad_to_deg(r):
  tmp = r*180/math.pi
  d = math.floor(tmp)
  m = math.floor((tmp - d)*60)
  s = round(((tmp - d)*60 - m)*60, 4)
  #NOTE: Edge case: rounding may bring the values up to their max
  if s == 60.0:
    s = 0.0
    m += 1
    if m == 60:
      m = 0
      d += 1
  return (d, m, s)

#Calculates the vehicle time given veh and sat postion and sat time
def calc_veh_time(xs, xv, sat_time):
  veh_sat_dis = numpy.linalg.norm(xs-xv)
  return veh_sat_dis/c + sat_time

#Calulates the position of the vehicle given the sat data
def calc_veh_pos(Sat_data):
  #initialize the step norm to -1
  s_norm = -1
  #initialize xv to geo location of b12 lamp post at last ts
  xv = geo_to_cart(prev_time, 40, 45, 55, 1, 111, 50, 58.0, -1, 1372.00)
  while s_norm == -1  or s_norm > 0.01:
    J  = build_jacob(Sat_data, xv)
    F  = build_resid(Sat_data, xv)
    #Calculate the step using numpy's least squares function
    #J(xv)*s = -F(xv)
    s      = numpy.linalg.lstsq(J, -F)[0]
    #xv    = xv + s
    xv     = numpy.add(xv, s)
    s_norm = numpy.linalg.norm(s)
    
  tv = calc_veh_time(Sat_data[0].position, xv, Sat_data[0].time)
  (lat_d, lat_m, lat_s, NS, lon_d, lon_m, lon_s, EW, h) = cart_to_geo(tv, xv)

  lat_s = round(lat_s, 2)
  lon_s = round(lon_s, 2)
  h     = round(h, 2)

  return str(tv) + ' ' + str(lat_d) + ' ' + str(lat_m) + ' ' + str(lat_s) + ' ' + str(NS) + ' ' + str(lon_d) + ' ' + str(lon_m) + ' ' + str(lon_s) + ' ' + str(EW) + ' ' + str(h)

#Builds the Jacobian matrix
def build_jacob(Sat_data, xv):
  jacobian = []
  for sat in range(0, len(Sat_data) - 1):
    Xs1 = numpy.array(Sat_data[sat].position)
    Xs2 = numpy.array(Sat_data[sat+1].position)
    Xs1_n = numpy.linalg.norm(Xs1 - xv)
    Xs2_n = numpy.linalg.norm(Xs2 - xv)

    J1 =       (Xs1[0] - xv[0])/Xs1_n
    J1 = J1 - ((Xs2[0] - xv[0])/Xs2_n)

    J2 =       (Xs1[1] - xv[1])/Xs1_n
    J2 = J2 - ((Xs2[1] - xv[1])/Xs2_n)
    
    J3 =       (Xs1[2] - xv[2])/Xs1_n
    J3 = J3 - ((Xs2[2] - xv[2])/Xs2_n)
    
    jacobian.append( [J1,J2,J3] )
  return numpy.array(jacobian)

#Builds the residual vector
def build_resid(Sat_data, xv):
  residual = []
  for sat in range(0, len(Sat_data) - 1):
    Xs1  = numpy.array(Sat_data[sat].position)
    Xs2  = numpy.array(Sat_data[sat+1].position)
    Xv   = numpy.array(xv)

    ts1 = Sat_data[sat].time
    ts2 = Sat_data[sat+1].time 
    
    D1 = numpy.linalg.norm(Xs2 - Xv)
    D2 = numpy.linalg.norm(Xs1 - Xv)

    row = D1 - D2 - c*(ts1 - ts2)
    residual.append(row)
  return numpy.array(residual)
####################################

#Parse the data file and set the variables
data_file = open(data_file, 'r')
for line in data_file:
  line_splt = line.replace(',', '').split()

  component = line_splt[2]
  value     = float(line_splt[0])
  if component == 'pi':
    pi = float(value)
  elif component == 'c':
    c  = float(value)
  elif component == 'R':
    R  = float(value)
  elif component == 's':
    s  = float(value)

#Parse the piped input from satellite
prev_time = 0
Sat_data = []
for line in sys.stdin:
  line_split = line.split()
  ts = float(line_split[1])

  #NOTE: A time diff of 1.0 seconds was given in the instructions, 
  #      but .999 is used in np.dat, so we're setting .95 to be safe.
  if prev_time is not 0 and abs(prev_time - ts) > .95:
    #A new set of satellite transmissions has begun, process the current set before reading more input
    print( calc_veh_pos(Sat_data) )
    Sat_data = []
 
  prev_time = ts

  sat_num = int(line_split[0])
  xs      = float(line_split[2])
  ys      = float(line_split[3])
  zs      = float(line_split[4])
  Xs      = [xs,ys,zs]

  new_sat_trans          = Sat_trans(sat_num)
  new_sat_trans.position = Xs
  new_sat_trans.time     = ts
  new_sat_trans.sat_num  = sat_num
  Sat_data.append(new_sat_trans)

#Last set of transmissions
print( calc_veh_pos(Sat_data) )
